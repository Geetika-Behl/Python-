Q You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        a=[]
        b=0
        for i in range(len(nums)):
            for j in range(len(nums)):
               b=nums[i]+nums[j]
               if b==target and i!=j:
                    a.append(i)
                    a.append(j)
                    return a
Q Given an integer x, return true if x is a palindrome, and false otherwise.

class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x< 0:
            return False

        else:
            return str(x) == str(x)[::-1]
            return True
Q Given a roman numeral, convert it to an integer.

class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        dict = {
        'I':1,
        'V':5,
        'X':10,
        'L':50,
        'C':100,
        'D':500,
        'M':1000 }
        s = s.replace("IV", "IIII").replace("IX", "VIIII").replace("XL", "XXXX").replace("XC", "LXXXX").replace("CD", "CCCC").replace("CM", "DCCCC")
        sum=0
        for char in s:
            sum += dict.get(char)
            
        return(sum)

Q Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string "".

class Solution(object):
    def longestCommonPrefix(self, strs):
        if not strs:
            return ""  
        min_len = min(len(s) for s in strs)
        
        common_prefix = ""
        for i in range(min_len):
            current_char = strs[0][i]
            for string in strs:
                if string[i] != current_char:
                    return common_prefix 
            
            common_prefix += current_char 
        
        return common_prefix

        
        
