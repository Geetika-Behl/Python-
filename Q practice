Q1 You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        a=[]
        b=0
        for i in range(len(nums)):
            for j in range(len(nums)):
               b=nums[i]+nums[j]
               if b==target and i!=j:
                    a.append(i)
                    a.append(j)
                    return a
Q2 Given an integer x, return true if x is a palindrome, and false otherwise.

class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x< 0:
            return False

        else:
            return str(x) == str(x)[::-1]
            return True
Q3 Given a roman numeral, convert it to an integer.

class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        dict = {
        'I':1,
        'V':5,
        'X':10,
        'L':50,
        'C':100,
        'D':500,
        'M':1000 }
        s = s.replace("IV", "IIII").replace("IX", "VIIII").replace("XL", "XXXX").replace("XC", "LXXXX").replace("CD", "CCCC").replace("CM", "DCCCC")
        sum=0
        for char in s:
            sum += dict.get(char)
            
        return(sum)

Q4 Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string "".

class Solution(object):
    def longestCommonPrefix(self, strs):
        if not strs:
            return ""  
        min_len = min(len(s) for s in strs)
        
        common_prefix = ""
        for i in range(min_len):
            current_char = strs[0][i]
            for string in strs:
                if string[i] != current_char:
                    return common_prefix 
            
            common_prefix += current_char 
        
        return common_prefix

Q5 Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
. Open brackets must be closed by the same type of brackets.
. Open brackets must be closed in the correct order.
. Every close bracket has a corresponding open bracket of the same type.

class Solution(object):
    def isValid(self, s):
        paranthesis = dict(('()', '[]', '{}'))
        list = []
        for i in s:
            if i in '([{':
                list.append(i)
            elif len(list) == 0 or i != paranthesis[list.pop()]:
                return False
        return len(list) == 0
        
Q6 You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        dump=ListNode(0)
        tail=dump
        while True:
            if(list1==None):
                tail.next=list2
                break
            
            if(list2==None):
                tail.next=list1
                break

            if(list1.val<=list2.val):
                tail.next=list1
                list1=list1.next
            else:
                tail.next=list2
                list2=list2.next
            tail=tail.next
        return dump.next

Q7 Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.
Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.

class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        temp = len(nums)-1
        while temp > 0:
            if nums[temp] == nums[temp-1]:
                nums.pop(temp)
            temp = temp-1

Q8 Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
Return k.

class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        x = 0
        for i in nums:
           if i != val:
              nums[x] = i
              x += 1
        return x

Q9 Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        for i in range (len(nums)):
            if nums[i] == target:
                return i
            elif nums[i]>target:
                return i
        return len(nums)

Q10 Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        left = 0
        right = x
        while left <= right:
            mid = (left + right) // 2
            if mid * mid < x:
                left = mid + 1
            elif mid * mid > x:
                right = mid -1
            else:
                return mid
            
        return right

Q11 You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        for j in range(n):
            nums1[m+j] = nums2[j]
        nums1.sort()
        
